{
  "name": "throng",
  "version": "4.0.0",
  "description": "A simple worker-manager for clustered apps",
  "keywords": [
    "cluster",
    "worker",
    "process"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/hunterloftis/throng"
  },
  "homepage": "https://github.com/hunterloftis/throng",
  "bugs": {
    "url": "https://github.com/hunterloftis/throng/issues"
  },
  "main": "lib/throng.js",
  "files": [
    "lib"
  ],
  "scripts": {
    "test": "mocha"
  },
  "engines": {
    "node": ">= 4.0.0"
  },
  "author": {
    "name": "Hunter Loftis",
    "email": "hunter@hunterloftis.com"
  },
  "license": "MIT",
  "devDependencies": {
    "chai": "^3.5.0",
    "mocha": "^2.4.5"
  },
  "dependencies": {
    "lodash.defaults": "^4.0.1"
  },
  "readme": "# Throng\n\nDead-simple one-liner for clustered Node.js apps.\n\nRuns X workers and respawns them if they go down.\nCorrectly handles signals from the OS.\n\n```js\nconst throng = require('throng');\n\nthrong((id) => {\n  console.log(`Started worker ${id}`);\n});\n```\n\n```\n$ node example\nStarted worker 1\nStarted worker 2\nStarted worker 3\nStarted worker 4\n```\n\n## Installation\n\n```\nnpm install --save throng\n```\n\nFor older versions of node (< 4.x), use throng 2.x.\n\n## Use\n\nSimplest; automatically fork 1 worker per CPU core:\n\n```js\nthrong(startFunction);\n```\n\nSpecify a number of workers:\n\n```js\nthrong(3, startFunction);\n```\n\nSpecify more options:\n\n```js\nthrong({\n  workers: 16,\n  grace: 1000,\n  master: masterFunction,\n  start: startFunction\n});\n```\n\nHandle signals (for cleanup on a kill signal, for instance):\n\n```js\nthrong((id) => {\n  console.log(`Started worker ${id}`);\n\n  process.on('SIGTERM', function() {\n    console.log(`Worker ${id} exiting`);\n    console.log('Cleanup here');\n    process.exit();\n  });\n});\n```\n\n## All Options (with defaults)\n\n```js\nthrong({\n  workers: 4,       // Number of workers (cpu count)\n  lifetime: 10000,  // ms to keep cluster alive (Infinity)\n  grace: 4000       // ms grace period after worker SIGTERM (5000)\n}, startFn);\n```\n\n## A Complex example\n\n```js\nconst throng = require('./lib/throng');\n\nthrong({\n  workers: 4,\n  master: startMaster,\n  start: startWorker\n});\n\n// This will only be called once\nfunction startMaster() {\n  console.log(`Started master`);\n}\n\n// This will be called four times\nfunction startWorker(id) {\n  console.log(`Started worker ${ id }`);\n\n  process.on('SIGTERM', () => {\n    console.log(`Worker ${ id } exiting...`);\n    console.log('(cleanup would happen here)');\n    process.exit();\n  });\n}\n```\n\n```\n$ node example-complex.js\nStarted master\nStarted worker 1\nStarted worker 2\nStarted worker 3\nStarted worker 4\n\n$ killall node\n\nWorker 3 exiting...\nWorker 4 exiting...\n(cleanup would happen here)\n(cleanup would happen here)\nWorker 2 exiting...\n(cleanup would happen here)\nWorker 1 exiting...\n(cleanup would happen here)\n```\n\n## Tests\n\n```\nnpm test\n```\n",
  "readmeFilename": "readme.md",
  "_id": "throng@4.0.0",
  "_from": "throng@*"
}
